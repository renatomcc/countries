import { useEffect, useState } from 'react'
import './styles/App.sass'
import { CountryCard } from './components/CountryCard'
import axios from 'axios';

type CountryType = {
  name: string,
  area: number,
  capital: string,
  currency: Currency,
  flag: string,
  languages: any,
  population: number,
  region: string,
}

type Currency = {
  name: string,
  initials: string,
}

var Countries: CountryType[] = [];

function App() {

  const [isLoading, setIsLoading] = useState(true)
  const [searchCountry, setSearchCountry] = useState('');
  const [sortedCountries, setSortedCountries] = useState<CountryType[]>([]);
  const filteredCountries = searchCountry.length > 0 ? sortedCountries.filter((country: any) => (country.name).toLocaleLowerCase().includes(searchCountry.toLocaleLowerCase())) : sortedCountries;

  async function fetchCountries() {
    Promise.all(
      await axios.get('https://restcountries.com/v3.1/all')
        .then((data: any) => {
          return data.data
        })
    ).then(res => {
      res.map(item => {
        const Country: CountryType = {
          name: item.name.common,
          flag: item.flags.png,
          area: item.area.toLocaleString(),
          capital: item.capital,
          currency: {
            name: '',
            initials: '',
          },
          languages: '',
          population: item.population.toLocaleString(),
          region: item.region,
        }
        if (item.capital != null && item.capital.length > 0) {
          Country.capital = Object.values(item.capital).toString().split(',').join(', ')
        }
        if (item.languages) {
          if (Object.values(item.languages).length > 3) {
            Country.languages = Object.values(item.languages).slice(0, 3).toString().split(',').join(', ') + ' and others...'
            console.log(Country.languages)
          } else Country.languages = Object.values(item.languages).toString().split(',').join(', ')
        }
        if (item.currencies) {
          Country.currency.name = item.currencies[Object.keys(item.currencies)[0]].name
          Country.currency.initials = Object.keys(item.currencies)[0]
        }
        Countries.push(Country)
      })
    }).then(() => {
      Countries.sort(function (a, b) {
        return a.name.localeCompare(b.name);
      })
      setSortedCountries(Countries)
      setIsLoading(false)
    })
  }

  function sortCountries(region: string) {
    if (region == 'all') {
      setSortedCountries(Countries)
    } else {
      setSortedCountries(Countries.filter(element => element.region.toLocaleLowerCase() == region))
    }
  }

  useEffect(() => {
    fetchCountries()
  }, [])

  return (
    <div className="App" id='App'>
      <header>
        <div className="pageLogo">
          <svg viewBox="0 0 380.45 380.45">
            <path style={{ fill: '#1EA6C6' }} d="M102.62,211.975c0.02,0.08,0.04,0.15,0.06,0.23c1.91,7.94,3.42,19.8,1.63,35.19
				c-1.91,16.48,5.5,32.66,19.11,42.15l18.56,12.95c0,0-6.37,48.72,11.31,74.36v0.01C65.91,359.665,0,282.645,0,190.225
				c0-53.81,22.35-102.41,58.27-137c-14.15,28.48-28.54,72.45-8.29,109.27c9.27,16.85,23.9,27.78,40.15,34.8
				C96.36,199.975,101.02,205.395,102.62,211.975z" />
            <path style={{ fill: '#1EA6C6' }} d="M190.23,0.005c41.46,0,79.82,13.26,111.07,35.79c0,0-16.37,25.11-15.71,50.17
				c0.15,5.99,4.84,10.89,10.81,11.52c0.42,0.04,0.85,0.07,1.27,0.07c4.55,0,8.75-2.58,10.81-6.73c4.38-8.78,15.91-19.42,45.02,1.77
				l0.01-0.01c2.17,3.61,4.22,7.3,6.14,11.07c0,0-10.16,2.28-23.77,0.6c-3.78-0.47-7.6,0.45-10.69,2.67
				c-2.15,1.55-4.62,3.78-7.36,6.53c-13.89,13.96-16.19,43-16.19,43c-0.27,6.06,0,12.76,0.97,20.16
				c2.17,16.44,17.24,28.04,33.65,25.64c0.24-0.03,0.48-0.07,0.72-0.1c11.84-1.84,22.65,7.09,23.33,19.05
				c0.61,10.79,2.91,23.02,8.98,33.34h0.01c-26.37,73.4-96.59,125.9-179.07,125.9c-12.64,0-24.99-1.23-36.94-3.58v-0.01
				c0,0,5.35-5.01,19.39-19.59l29.58-31.37c8.54-9.38,17.06-19.07,24.47-28.12c13.17-16.09,9.01-40.13-8.76-50.92
				c-16.59-10.07-36.14-23.07-48.73-35.16c-6.33-6.07-15.04-8.98-23.76-8.04c-11.2,1.21-27.07,3.65-42.8,8.55
				c2.7-26.79-43.7-50.71-31.7-71.71c6.5-11.39,17.42-11.6,26.05-9.41c6.87,1.74,14.08-0.76,18.54-6.27
				c10.56-13.03,33.63-25.24,50.49-32.96c11.05-5.05,14.62-18.98,7.36-28.71c-22.27-29.9-53.82-49.59-53.82-49.59
				C141.44,4.815,165.27,0.005,190.23,0.005z M197.98,61.495l23-30c0,0-10-9-46-12C167.79,18.895,194.98,38.495,197.98,61.495z" />
            <path style={{ fill: '#F7CF52' }} d="M353.51,92.585l-0.01,0.01c-29.11-21.19-40.64-10.55-45.02-1.77c-2.06,4.15-6.26,6.73-10.81,6.73
				c-0.42,0-0.85-0.03-1.27-0.07c-5.97-0.63-10.66-5.53-10.81-11.52c-0.66-25.06,15.71-50.17,15.71-50.17
				C322.33,50.935,340.14,70.275,353.51,92.585z" />
            <path style={{ fill: '#F7CF52' }} d="M380.45,190.225c0,22.57-3.93,44.23-11.15,64.32h-0.01c-6.07-10.32-8.37-22.55-8.98-33.34
				c-0.68-11.96-11.49-20.89-23.33-19.05c-0.24,0.03-0.48,0.07-0.72,0.1c-16.41,2.4-31.48-9.2-33.65-25.64
				c-0.97-7.4-1.24-14.1-0.97-20.16c0,0,2.3-29.04,16.19-43c2.74-2.75,5.21-4.98,7.36-6.53c3.09-2.22,6.91-3.14,10.69-2.67
				c13.61,1.68,23.77-0.6,23.77-0.6C372.95,129.625,380.45,159.045,380.45,190.225z" />
            <path style={{ fill: '#F7CF52' }} d="M220.98,31.495l-23,30c-3-23-30.19-42.6-23-42C210.98,22.495,220.98,31.495,220.98,31.495z" />
            <path style={{ fill: '#F7CF52' }} d="M173.42,63.145c7.26,9.73,3.69,23.66-7.36,28.71c-16.86,7.72-39.93,19.93-50.49,32.96
				c-4.46,5.51-11.67,8.01-18.54,6.27c-8.63-2.19-19.55-1.98-26.05,9.41c-12,21,34.4,44.92,31.7,71.71
				c-0.02-0.08-0.04-0.15-0.06-0.23c-1.6-6.58-6.26-12-12.49-14.68c-16.25-7.02-30.88-17.95-40.15-34.8
				c-20.25-36.82-5.86-80.79,8.29-109.27c17.54-16.91,38.33-30.47,61.33-39.67C119.6,13.555,151.15,33.245,173.42,63.145z" />
            <path style={{ fill: '#F7CF52' }} d="M217.97,246.855c17.77,10.79,21.93,34.83,8.76,50.92c-7.41,9.05-15.93,18.74-24.47,28.12
				l-29.58,31.37c-14.04,14.58-19.39,19.59-19.39,19.59c-17.68-25.64-11.31-74.36-11.31-74.36l-18.56-12.95
				c-13.61-9.49-21.02-25.67-19.11-42.15c1.79-15.39,0.28-27.25-1.63-35.19c15.73-4.9,31.6-7.34,42.8-8.55
				c8.72-0.94,17.43,1.97,23.76,8.04C181.83,223.785,201.38,236.785,217.97,246.855z" />
            <path style={{ opacity: '0.3', fill: '#808080' }} d="M190.23,0.005c5.8,0,11.54,0.26,17.2,0.77
		C110.48,9.515,34.5,90.995,34.5,190.225c0,99.25,76.01,180.74,172.99,189.45c-5.68,0.51-11.44,0.77-17.26,0.77
		C85.17,380.445,0,295.285,0,190.225S85.17,0.005,190.23,0.005z" />
          </svg>
        </div>
        <div className="filterByRegion">
          <select
            onChange={(e) => sortCountries(e.target.value)}
          >
            <option value="all">All</option>
            <option value="africa">Africa</option>
            <option value="americas">Americas</option>
            <option value="antarctic">Antarctic</option>
            <option value="asia">Asia</option>
            <option value="europe">Europe</option>
            <option value="oceania">Oceania</option>
          </select>
        </div>
        <div className="search">
          <div className="searchBar">
            <div className="searchIcon">
              <svg viewBox="0 0 443.609 443.609">
                <path d="M117.095,117.103c-41.816,41.815-41.816,109.854,0,151.67c20.908,20.908,48.372,31.362,75.835,31.362
		                    c27.463,0,54.927-10.454,75.835-31.362c41.815-41.815,41.815-109.854,0-151.67S158.91,75.289,117.095,117.103z M266.33,213.708
		                    c3.649,15.462,2.377,28.823-3.515,38.508l-29.179-29.179c9.05-7.707,19.366-13.508,30.456-17.202
		                    C264.962,208.467,265.713,211.094,266.33,213.708z M223.03,233.644l29.179,29.179c-9.684,5.892-23.046,7.165-38.509,3.515
		                    c-2.614-0.617-5.241-1.368-7.872-2.237C209.523,253.01,215.324,242.694,223.03,233.644z M191.908,258.359
		                    c-11.001-5.418-21.813-12.862-31.828-21.965l32.85-32.85l19.449,19.449C203.251,233.47,196.346,245.457,191.908,258.359z
                        M222.985,212.387l-19.449-19.449l32.85-32.85c9.103,10.015,16.546,20.826,21.964,31.827
		                    C245.449,196.353,233.463,203.258,222.985,212.387z M133.653,123.054c6.05-3.681,13.53-5.563,22.067-5.563
		                    c5.129,0,10.637,0.677,16.44,2.047c2.615,0.617,5.244,1.369,7.876,2.239c-3.694,11.09-9.496,21.408-17.203,30.458L133.653,123.054z
		                    M193.957,127.519c11,5.418,21.81,12.861,31.823,21.963l-32.85,32.85l-19.446-19.446
		                    C182.613,152.408,189.518,140.421,193.957,127.519z M236.395,138.867c-11.994-10.987-25.122-19.861-38.525-26.094
		                    c0.737-3.875,1.268-7.807,1.577-11.783c19.062,1.338,37.772,8.555,53.175,21.651L236.395,138.867z M183.615,107.177
		                    c-2.674-0.854-5.346-1.609-8.009-2.238c-2.017-0.476-4.008-0.876-5.976-1.213c4.847-1.257,9.772-2.131,14.732-2.59
		                    C184.175,103.164,183.932,105.179,183.615,107.177z M104.931,175.613c0.629,2.664,1.384,5.336,2.238,8.009
		                    c-1.998,0.317-4.013,0.561-6.041,0.747c0.459-4.961,1.333-9.886,2.59-14.734C104.055,171.604,104.455,173.596,104.931,175.613z
		                    M119.53,172.167c-3.649-15.462-2.377-28.823,3.515-38.508l29.182,29.182c-9.049,7.706-19.367,13.507-30.458,17.202
		                    C120.899,177.411,120.147,174.783,119.53,172.167z M162.877,173.492l19.446,19.446l-32.85,32.85
		                    c-9.102-10.014-16.545-20.824-21.963-31.825C140.413,189.525,152.4,182.62,162.877,173.492z M149.465,247.009
		                    c11.995,10.989,25.124,19.863,38.529,26.096c-0.737,3.875-1.269,7.806-1.578,11.782c-19.063-1.338-37.774-8.555-53.178-21.651
		                    L149.465,247.009z M202.249,278.7c2.672,0.854,5.344,1.608,8.006,2.237c2.02,0.477,4.012,0.875,5.982,1.212
		                    c-4.848,1.258-9.774,2.132-14.735,2.591C201.688,282.713,201.932,280.697,202.249,278.7z M280.929,210.263
		                    c-0.628-2.663-1.383-5.334-2.237-8.006c1.998-0.317,4.013-0.56,6.04-0.747c-0.459,4.959-1.333,9.884-2.59,14.73
		                    C281.805,214.272,281.405,212.28,280.929,210.263z M273.097,188.001c-6.233-13.404-15.107-26.533-26.096-38.528l16.227-16.227
		                    c13.097,15.403,20.313,34.115,21.651,53.178C280.903,186.733,276.972,187.264,273.097,188.001z M100.981,199.455
		                    c3.976-0.309,7.907-0.841,11.783-1.578c6.233,13.403,15.107,26.531,26.094,38.525l-16.227,16.227
		                    C109.536,237.227,102.319,218.517,100.981,199.455z" />
                <path d="M338.337,160.501c-1.435,0.269-2.822,1.001-3.84,2.05c-2.894,2.813-2.898,7.787,0,10.6
		                    c3.894,4.011,10.881,2.145,12.474-3.122C348.576,164.721,343.787,159.38,338.337,160.501
		                    C337.857,160.591,340.768,160.001,338.337,160.501z" />
                <path d="M349.391,190.178c-0.073-4.141-3.519-7.408-7.63-7.368c-4.142,0.073-7.44,3.489-7.368,7.63
		                    c0.679,38.738-14.03,75.154-41.418,102.542c-55.165,55.166-144.924,55.165-200.089,0c-55.165-55.165-55.165-144.925,0-200.09
		                    c55.165-55.165,144.924-55.166,200.089,0c15.914,15.914,27.5,34.749,34.437,55.982c1.287,3.938,5.524,6.086,9.458,4.8
		                    c3.938-1.286,6.086-5.521,4.8-9.458c-7.677-23.497-20.492-44.333-38.089-61.93C274.025,52.73,234.729,36.453,192.93,36.453
		                    c-41.799,0-81.095,16.277-110.651,45.833s-45.833,68.853-45.833,110.651s16.277,81.095,45.833,110.651
		                    s68.853,45.833,110.651,45.833c41.798,0,81.095-16.277,110.651-45.833C333.873,273.298,350.142,233.021,349.391,190.178z" />
                <path d="M434.163,388.562l-83.899-83.899c23.122-32.414,35.596-71.109,35.596-111.725c0-51.534-20.068-99.982-56.508-136.422
		                    C292.913,20.076,244.463,0.008,192.93,0.008c-51.533,0-99.982,20.068-136.422,56.508C20.068,92.956,0,141.404,0,192.938
		                    S20.068,292.92,56.508,329.36c36.439,36.44,84.889,56.508,136.422,56.508c40.616,0,79.311-12.474,111.726-35.596l83.899,83.899
		                    c6.287,6.287,14.546,9.431,22.804,9.431c8.259,0,16.517-3.144,22.804-9.431c6.092-6.091,9.446-14.19,9.446-22.804
		                    S440.254,394.653,434.163,388.562z M67.114,318.753C33.508,285.147,15,240.465,15,192.938s18.508-92.209,52.114-125.815
		                    s78.289-52.114,125.815-52.114c47.527,0,92.209,18.508,125.816,52.114c33.606,33.606,52.115,78.289,52.115,125.815
		                    s-18.508,92.209-52.115,125.815c-33.607,33.606-78.289,52.114-125.816,52.114C145.403,370.868,100.721,352.36,67.114,318.753z
		                    M423.556,423.563c-6.726,6.726-17.669,6.726-24.396,0l-82.55-82.55c4.388-3.678,8.645-7.556,12.742-11.653
		                    c4.097-4.097,7.976-8.354,11.654-12.742l82.55,82.55c3.258,3.258,5.053,7.59,5.053,12.198S426.814,420.305,423.556,423.563z" />
              </svg>
              <input
                type="text"
                placeholder='Search...'
                onChange={(e) => setSearchCountry(e.target.value)}
                value={searchCountry} />
            </div>
          </div>
        </div>
      </header>
      {isLoading && (
        <h1>loading...</h1>
      )}
      {!isLoading && (
        <div className="countries">
          {filteredCountries.map((item: any) => {
            return (
              <CountryCard
                name={item.name}
                flag={item.flag}
                area={item.area}
                capital={item.capital}
                currencies={item.currency}
                languages={item.languages}
                population={item.population}
                region={item.region}
              />
            )
          })}
        </div>
      )}

    </div>
  )
}

export default App
